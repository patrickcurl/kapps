# This file is a golang template. Variable values come from the final set of
# variables applicable to the stack/profile/cluster/etc that you install this
# kapp into.

# since this isn't a Helm-based kapp, we have to track the version somewhere
# other than a `Chart.yaml` file. This lets us automatically tag our kapp repo
# in our CD pipeline.
version: 0.1.0

templates:
  - source: k8s/rbac.tpl.yaml
    dest: k8s/_generated_rbac.yaml

# These will be passed as env vars as well as any explicitly declared
vars:
  service_account: tiller
  tiller_namespace: kube-system
  role: ClusterRole
  role_name: cluster-admin
  role_binding: ClusterRoleBinding
  templated_path: "{{ index .kapp.templates 0 }}"

requires:
  - kubectl
  - helm

# this uses the helm binary but doesn't use the default run steps
run_units:
  helm:
    working_dir: "{{ .kapp.cacheRoot }}/{{ .kapp.id }}"       # directory to use as the working directory
    plan_install:
    apply_install:
      - name: install RBAC
        command: "{{ .kapp.vars.kubectl }}"
        args:
          - --context={{ .kapp.vars.kube_context }}
          - --namespace={{ .kapp.vars.tiller_namespace }}
          - apply
          - -f={{ .kapp.vars.templated_path }}
        env_vars:
          env_vars:
            KUBECONFIG: "{{ .kapp.vars.kubeconfig }}"
      - name: install tiller
        command: "{{ .kapp.vars.helm }}"
        args:
          - --kube-context={{ .kapp.vars.kube_context }}
          - --service-account={{ .kapp.vars.service_account }}
          - --tiller-namespace={{ .kapp.vars.tiller_namespace }}
          - init
          - --wait
          - --upgrade
        env_vars:
          KUBECONFIG: "{{ .kapp.vars.kubeconfig }}"
