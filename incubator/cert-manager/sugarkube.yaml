# This file is a golang template that supports sprig (https://masterminds.github.io/sprig/)
# text functions.  Variable values come from the final set of variables
# applicable to the stack/profile/cluster/etc that you install this kapp into.

templates:
  namespace:
    source: k8s/namespace.tpl.yaml
    dest: k8s/_generated_namespace.yaml

requires:
  - kubectl
  - helm

# load the cluster issuer YAML file so other kapps can refer to it through a variable instead of by hard-coding
# its name or kind.
outputs:
  - format: yaml
    id: clusterIssuer
    path: templates/clusterissuer.yaml

# this uses the helm binary but doesn't use the default run steps
run_units:
  helm:
    apply_install:          # when merging configs, list values replace other lists. So we need to redefine all the steps
                            # for this unit even though we only want to add a single step (to install the CRDs). This
                            # creates some duplication but makes things simpler and easier to override settings
      - name: install CRDs
        command: "{{ .kapp.vars.kubectl }}"
        args: |
          --context={{ .kapp.vars.kube_context }}
          apply
          -f=./k8s/00-crds.yaml
        env_vars:
          KUBECONFIG: "{{ .kapp.vars.kubeconfig }}"
        merge_priority: 20
      - name: create namespace
        command: "{{ .kapp.vars.kubectl }}"
        args: |
          --context={{ .kapp.vars.kube_context }}
          apply
          -f={{ .kapp.templates.namespace.rendered_path }}
        env_vars:
          KUBECONFIG: "{{ .kapp.vars.kubeconfig }}"
        merge_priority: 25
      - name: helm-install
        command: "{{ .kapp.vars.helm }}"
        args: |
          upgrade
            --kube-context={{ .kapp.vars.kube_context }}
            --tiller-namespace={{ .kapp.vars.tiller_namespace }}
            --wait
            --install
            --recreate-pods
            --timeout=600
            --namespace={{ .kapp.vars.namespace }}
            {{ .kapp.vars.release }}
            .
            {{ .kapp.vars.helm_params }}
        env_vars:
          KUBECONFIG: "{{ .kapp.vars.kubeconfig }}"
        merge_priority: 30         # install helm charts *after* running terraform if terraform is used. By default
        # terraform output will have been generated and loaded.
    apply_delete:
      - name: helm-delete
        command: "{{ .kapp.vars.helm }}"
        args: |
          delete
            --kube-context={{ .kapp.vars.kube_context }}
            --tiller-namespace={{ .kapp.vars.tiller_namespace }}
            --purge
            {{ .kapp.vars.release }}
        env_vars:
          KUBECONFIG: "{{ .kapp.vars.kubeconfig }}"
        merge_priority: 10         # delete helm charts *before* running terraform (we don't use 0 so you can insert your own steps before this one)
      - name: delete namespace
        command: "{{ .kapp.vars.kubectl }}"
        args:
          --context={{ .kapp.vars.kube_context }}
          delete
          --now
          namespace
          {{ .kapp.vars.namespace }}
        env_vars:
          KUBECONFIG: "{{ .kapp.vars.kubeconfig }}"
        merge_priority: 15         # delete
      - name: delete CRDs
        command: "{{ .kapp.vars.kubectl }}"
        args: |
          --context={{ .kapp.vars.kube_context }}
          delete
          -f=./k8s/00-crds.yaml
        env_vars:
          KUBECONFIG: "{{ .kapp.vars.kubeconfig }}"
        merge_priority: 20
